;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ess-message" code nil nil [1536 1583])
            ("ess" include nil nil [1584 1598])
            ("ess-message" code nil nil [1599 1651])
            ("ess-mode" include nil nil [1652 1671])
            ("ess-custom" include nil nil [1672 1693])
            ("ess-message" code nil nil [1695 1756])
            ("ess-transcript-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1758 1826])
            ("put" code nil nil [1828 1879])
            ("or" code nil nil [1880 2062])
            ("put" code nil nil [2064 2112])
            ("or" code nil nil [2113 2290])
            ("ess-transcript-minor-mode" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [2292 2783])
            ("ess-listing-minor-mode" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [2785 3260])
            ("ess-automatic-sas-log-or-lst-mode" variable (:default-value t) nil [3270 3430])
            ("ess-SAS-log-mode-p" function nil nil [3432 3870])
            ("ess-SAS-listing-mode-p" function nil nil [3872 4528])
            ("add-to-list" code nil nil [4530 4611])
            ("add-to-list" code nil nil [4612 4701])
            ("SAS-log-mode" function (:user-visible-flag t) nil [4703 4880])
            ("SAS-listing-mode" function (:user-visible-flag t) nil [4908 5161])
            ("fset" code nil nil [5189 5230])
            ("fset" code nil nil [5231 5272])
            ("fset" code nil nil [5273 5314])
            ("fset" code nil nil [5315 5341])
            ("fset" code nil nil [5342 5387])
            ("sas-indent-width" variable
               (:user-visible-flag t
                :default-value 4)
                nil [5389 5494])
            ("sas-indent-ignore-comment" variable
               (:user-visible-flag t
                :default-value "*")
                nil [5496 5642])
            ("sas-require-confirmation" variable
               (:user-visible-flag t
                :default-value t)
                nil [5644 5788])
            ("sas-program" variable
               (:user-visible-flag t
                :default-value "sas")
                nil [5831 5974])
            ("sas-pre-run-hook" variable nil nil [5976 6100])
            ("sas-notify" variable
               (:user-visible-flag t
                :default-value t)
                nil [6506 6614])
            ("sas-error-notify" variable
               (:user-visible-flag t
                :default-value t)
                nil [6616 6751])
            ("sas-get-options" variable nil nil [6753 6891])
            ("sas-get-options-history" variable nil nil [6893 7012])
            ("sas-page-number-max-line" variable
               (:user-visible-flag t
                :default-value 3)
                nil [7014 7161])
            ("sas-notify-popup" variable (:user-visible-flag t) nil [7163 7301])
            ("sas-tmp-libname" variable
               (:user-visible-flag t
                :default-value "_tmp_")
                nil [7303 7414])
            ("sas-file-name" variable (:user-visible-flag t) nil [7416 7537])
            ("sas-white-chars" variable (:default-value " 	
") nil [7653 7776])
            ("sas-comment-chars" variable (:default-value (concat sas-white-chars ";")) nil [7778 7880])
            ("ess-sas-run-regexp-opt" variable (:default-value t) nil [7882 8032])
            ("ess-sas-a" include nil nil [8034 8054])
            ("sas-buffer-name" variable nil nil [8056 8084])
            ("sas-file-root" variable nil nil [8085 8111])
            ("sas-submitable" variable nil nil [8112 8139])
            ("sas-dataset" variable nil nil [8140 8164])
            ("SAS-syntax-table" variable nil nil [8165 8223])
            ("if" code nil nil [8225 9482])
            ("font-lock" include nil nil [9484 9504])
            ("SAS-mode-font-lock-defaults" variable (:default-value (if ess-sas-run-regexp-opt (list (cons "^NOTE [0-9]+-[0-9]+: Line generated by the invoked macro" font-lock-comment-face) (cons "^NOTE: .*$" font-lock-comment-face) (cons "^      [^ @].*[.]$" font-lock-comment-face) (cons "^      [a-z].*[a-z][ ]?$" font-lock-comment-face) (cons "^      Engine:[ ]+V.+$" font-lock-comment-face) (cons "^      Physical Name:[ ]+.+$" font-lock-comment-face) (cons "^      \\(cpu\\|real\\) time[ ]+[0-9].*$" font-lock-comment-face) (cons "^      decimal may be shifted by the" font-lock-comment-face) (cons "^NOTE: The infile " font-lock-comment-face) (cons "^NOTE: 1 record was read from the infile " font-lock-comment-face) (cons "^NOTE: [1-9][0-9]* records were read from the infile " font-lock-comment-face) (cons "^      Filename=.*,$" font-lock-comment-face) (cons "^      File Name=.*,$" font-lock-comment-face) (cons "^      File $" font-lock-comment-face) (cons "^      Name=.*,$" font-lock-comment-face) (cons "^      File List=(" font-lock-comment-face) (cons "^      List=(" font-lock-comment-face) (cons "^      Owner Name=.*,$" font-lock-comment-face) (cons "^      Access Permission=.*,$" font-lock-comment-face) (cons "^      Last Modified=.*,?$" font-lock-comment-face) (cons "^      File Size (bytes)=[0-9]+$" font-lock-comment-face) (cons "^      Pipe command=" font-lock-comment-face) (cons "^NOTE: The file " font-lock-comment-face) (cons "^NOTE: 1 record was written to the file " font-lock-comment-face) (cons "^NOTE: [1-9][0-9]* records were written to the file " font-lock-comment-face) (cons "^NOTE: PROC LOGISTIC is modeling the probability that" font-lock-comment-face) (cons "^NOTE: PROC GENMOD is modeling the probability that" font-lock-comment-face) (cons "^1[ ]+The SAS System.*$" font-lock-comment-face) (cons "^.*$" font-lock-comment-face) (cons "[*][*][*] ANNOTATE macros are now available [*][*][*]" font-lock-comment-face) (cons "For further information on ANNOTATE macros, enter," font-lock-comment-face) (cons "\\(or \\)?%HELPANO.*$" font-lock-comment-face) (cons "^Local Variables:$" font-lock-comment-face) (cons "^End:$" font-lock-comment-face) (cons "^MPRINT([_A-Z0-9]+)" font-lock-comment-face) (cons "^ERROR\\( [0-9]+-[0-9]+\\)?: .*$" font-lock-keyword-face) (cons "^       [^ @].*\\([.][ ]?[ ]?\\|[,a-z][ ]\\)$" font-lock-keyword-face) (cons "^             [^ @].*\\([.][ ]?[ ]?\\|[,a-z][ ]\\)$" font-lock-keyword-face) (cons "^              [^ @].*\\([.][ ]?[ ]?\\|[,a-z][ ]\\)$" font-lock-keyword-face) (cons "^               [^ @].*\\([.][ ]?[ ]?\\|[,a-z][ ]\\)$" font-lock-keyword-face) (cons "^              a format name." font-lock-keyword-face) (cons "^       where a numeric operand is required. The condition was: " font-lock-keyword-face) (cons "[ ][_]+$" font-lock-keyword-face) (cons "^WARNING\\( [0-9]+-[0-9]+\\)?: .*$" font-lock-function-name-face) (cons "^         [^ @].*\\([.][ ]?[ ]?\\|[,a-z][ ]\\)$" font-lock-function-name-face) (cons "^               [^ @].*\\([.][ ]?[ ]?\\|[,a-z][ ]\\)$" font-lock-function-name-face) (cons "^                [^ @].*\\([.][ ]?[ ]?\\|[,a-z][ ]\\)$" font-lock-function-name-face) (cons "^                 [^ @].*\\([.][ ]?[ ]?\\|[,a-z][ ]\\)$" font-lock-function-name-face) (cons "\\(^[0-9]*\\|[:;!]\\)[ 	]*%?\\*[^;/][^;]*;" font-lock-comment-face) (cons "\\<and(" font-lock-function-name-face) (cons "\\<data=" font-lock-keyword-face) (cons "\\<in:(" font-lock-function-name-face) (cons "\\<index(" font-lock-function-name-face) (cons "\\<input(" font-lock-function-name-face) (cons "\\<libname(" font-lock-function-name-face) (cons "\\<not(" font-lock-function-name-face) (cons "\\<or(" font-lock-function-name-face) (cons "\\<put(" font-lock-function-name-face) (cons "\\<sum(" font-lock-function-name-face) (cons (regexp-opt (quote ("data" "%macro" "%mend" "%do" "%to" "%by" "%end" "%goto" "%go to" "%if" "%then" "%else" "%global" "%inc" "%include" "%input" "%local" "%let" "%put" "%sysexec")) (quote words)) font-lock-constant-face) (cons (concat "\\<" (regexp-opt (quote ("run;" "quit;" "endsas;" "cards;" "cards4;" "datalines;" "datalines4;" "lines;" "lines4;")))) font-lock-constant-face) (cons (concat "\\<" (regexp-opt (quote ("end;" "list;" "lostcard;" "page;" "return;" "stop;")))) font-lock-keyword-face) (cons (concat "\\<" (regexp-opt (quote ("compress=" "in=" "out=" "sortedby=")))) font-lock-keyword-face) (cons (concat "\\<proc[ ]+" (regexp-opt (quote ("append" "calendar" "catalog" "chart" "cimport" "cport" "compare" "contents" "copy" "corr" "datasets" "dbcstab" "display" "explode" "export" "fcmp" "format" "forms" "freq" "fsbrowse" "fsedit" "fsletter" "fslist" "fsview" "ganno" "gchart" "gcontour" "gdevice" "geocode" "gfont" "gimport" "ginside" "gkeymap" "gmap" "goptions" "gplot" "gprint" "gproject" "greduce" "gremove" "greplay" "gslide" "gtestit" "g3d" "g3grid" "iml" "import" "insight" "mapimport" "means" "options" "plot" "pmenu" "print" "printto" "rank" "registry" "report" "setinit" "sgdesign" "sgpanel" "sgplot" "sgrender" "sgscatter" "sort" "sql" "standard" "summary" "tabulate" "template" "timeplot" "transpose" "trantab" "univariate" "aceclus" "anova" "arima" "autoreg" "bgenmod" "blifereg" "boxplot" "bphreg" "calis" "cancorr" "candisc" "catmod" "citibase" "cluster" "computab" "corresp" "countreg" "discrim" "distance" "entropy" "expand" "factor" "fastclus" "forecast" "gam" "gee" "genmod" "glimmix" "glm" "glmmod" "glmpower" "glmselect" "hpmixed" "inbreed" "kde" "krige2d" "lattice" "lifereg" "lifetest" "loess" "logistic" "mcmc" "mdc" "mds" "mi" "mianalyze" "mixed" "modeclus" "model" "mortgage" "multtest" "nested" "nlin" "nlmixed" "npar1way" "orthoreg" "panel" "pdlreg" "phreg" "plan" "plm" "pls" "power" "princomp" "prinqual" "probit" "qlim" "quantreg" "reg" "risk" "robustreg" "rsreg" "score" "seqdesign" "seqtest" "severity" "sim2d" "similarity" "simlin" "simnormal" "spectra" "statespace" "stdize" "stepdisc" "surveyfreq" "surveylogistic" "surveymeans" "surveyphreg" "surveyreg" "surveyselect" "syslin" "tcalis" "timeid" "timeseries" "tphreg" "tpspline" "transreg" "tree" "ttest" "ucm" "varclus" "varcomp" "variogram" "varmax" "x11" "x12")) (quote words))) font-lock-constant-face) (cons (concat (regexp-opt (quote ("do" "to" "by" "goto" "abort" "and" "array" "assess" "attrib" "baseline" "bayes" "between" "bivar" "block" "bubble" "bubble2" "change" "choro" "class" "contains" "contrast" "delete" "display" "dm" "donut" "drop" "else" "error" "exchange" "exclude" "fcs" "file" "filename" "format" "freq" "footnote" "footnote1" "footnote2" "footnote3" "footnote4" "footnote5" "footnote6" "footnote7" "footnote8" "footnote9" "footnote10" "goptions" "grid" "hazardratio" "hbar" "hbar3d" "id" "if" "index" "infile" "informat" "input" "keep" "label" "length" "libname" "like" "link" "lsmeans" "manova" "means" "merge" "missing" "model" "modify" "not" "null" "ods" "options" "output" "otherwise" "pageby" "parms" "pie" "pie3d" "plot" "plot2" "prism" "put" "random" "rename" "repeated" "retain" "same" "save" "scatter" "select" "set" "skip" "star" "strata" "sum" "sumby" "surface" "table" "tables" "test" "then" "time" "title" "title1" "title2" "title3" "title4" "title5" "title6" "title7" "title8" "title9" "title10" "univar" "update" "value" "var" "vbar" "vbar3d" "weight" "where" "window" "with")) (quote words))) font-lock-keyword-face) (cons (concat "\\<" (regexp-opt (quote ("axis" "legend" "pattern" "symbol"))) "\\([1-9][0-9]?\\)?" "\\>") font-lock-keyword-face) (cons "%[a-z_][a-z_0-9]*[(;]" font-lock-function-name-face) (cons (concat (regexp-opt (quote ("abs" "arcos" "arsin" "atan" "betainv" "byte" "call execute" "call label" "call module" "call modulei" "call poke" "call ranbin" "call rancau" "call ranexp" "call rangam" "call rannor" "call ranpoi" "call rantbl" "call rantri" "call ranuni" "call rxchange" "call rxfree" "call rxsubstr" "call set" "call streaminit" "call symput" "call system" "cdf" "ceil" "cinv" "collate" "compress" "convx" "convxp" "cos" "cosh" "css" "cv" "daccdb" "daccdbsl" "daccsl" "daccsyd" "dacctab" "depdb" "depdbsl" "depsl" "depsyd" "deptab" "date" "datejul" "datepart" "datetime" "day" "dhms" "dif" "digamma" "dim" "erf" "erfc" "exp" "finv" "fipname" "fipnamel" "fipstate" "floor" "fuzz" "gaminv" "gamma" "hbound" "hms" "hour" "in" "index" "indexc" "input" "int" "intck" "intnx" "intrr" "irr" "juldate" "kurtosis" "lag" "lbound" "left" "length" "lgamma" "log" "log10" "log2" "logcdf" "logpdf" "logsdf" "max" "mdy" "mean" "min" "minute" "mod" "month" "mort" "n" "netpv" "nmiss" "normal" "npv" "ordinal" "pdf" "probbeta" "probbnml" "probchi" "probf" "probgam" "probhypr" "probit" "probnegb" "probnorm" "probt" "poisson" "put" "qtr" "quantile" "rand" "range" "rank" "repeat" "reverse" "right" "round" "rxmatch" "rxparse" "ranbin" "rancau" "ranexp" "rangam" "rannor" "ranpoi" "rantbl" "rantri" "ranuni" "saving" "scan" "sdf" "second" "sign" "sin" "sinh" "sqrt" "squantile" "std" "stderr" "stfips" "stname" "stnamel" "substr" "sum" "symget" "tan" "tanh" "time" "timepart" "tinv" "today" "translate" "trigamma" "trim" "trunc" "uniform" "until" "upcase" "uss" "var" "verify" "weekday" "when" "while" "year" "yyq" "zipfips" "zipname" "zipnamel" "zipstate" "airy" "band" "blshift" "brshift" "bnot" "bor" "bxor" "cnonct" "compbl" "dairy" "dequote" "fnonct" "ibessel" "indexw" "inputc" "inputn" "jbessel" "lowcase" "putc" "putn" "quote" "resolve" "soundex" "sysprod" "tnonct" "tranwrd" "trimn" "attrc" "attrn" "cexist" "close" "dclose" "dnum" "dopen" "dread" "exist" "fclose" "fetchobs" "fileexist" "finfo" "fopen" "fput" "fwrite" "getoption" "getvarc" "getvarn" "libname" "libref" "open" "optgetn" "optsetn" "pathname" "sysmsg" "varfmt" "varlabel" "varnum" "vartype")) (quote words)) "(") font-lock-function-name-face)) (list (cons "^NOTE: .*$" font-lock-constant-face) (cons "^ERROR: .*$" font-lock-keyword-face) (cons "^WARNING: .*$" font-lock-function-name-face) (cons "\\(^[0-9]*\\|;\\)[ 	]*\\(%?\\*\\|comment\\).*\\(;\\|$\\)" font-lock-comment-face) (cons "\\<%do[ 	]*\\(%until\\|%while\\)?\\>" font-lock-constant-face) (cons "\\<%\\(end\\|global\\|local\\|m\\(acro\\|end\\)\\)\\>" font-lock-constant-face) (cons (concat "\\(^[0-9]*\\|;\\|):\\|%then\\|%else\\)[ 	]*" "\\(data\\|endsas\\|finish\\|quit\\|run\\|start\\)[ 	
;]") font-lock-constant-face) (cons (concat "\\(^[0-9]*\\|;\\|):\\|%then\\|%else\\)[ 	]*" "proc[ 	]+" "\\(append" "\\|b\\(genmod\\|lifereg\\|phreg\\)" "\\|c\\(a\\(lendar\\|talog\\)\\|port\\|o\\(mpare\\|ntents\\|py\\|rr\\)\\)" "\\|d\\(atasets\\|bcstab\\|isplay\\)\\|ex\\(plode\\|port\\)" "\\|f\\(orm\\(at\\|s\\)\\|req\\|s\\(browse\\|edit\\|l\\(etter\\|ist\\)\\|view\\)\\)" "\\|g?\\(chart\\|p\\(lot\\|rint\\)\\)" "\\|g\\(anno\\|contour\\|device\\|font\\|\\(key\\)?map\\|options\\|project" "\\|re\\(duce\\|move\\|play\\)\\|slide\\|testit\\|3\\(d\\|grid\\)\\)" "\\|\\(map\\|[cg]\\)?import\\|i\\(ml\\|nsight\\)" "\\|means\\|options\\|p\\(menu\\|rintto\\)" "\\|r\\(ank\\|e\\(gistry\\|port\\)\\)" "\\|s\\(ort\\|ql\\|tandard\\|ummary\\)" "\\|t\\(abulate\\|emplate\\|imeplot\\|ran\\(spose\\|tab\\)\\)\\|univariate" "\\|a\\(ceclus\\|nova\\|rima\\|utoreg\\)\\|boxplot" "\\|c\\(a\\(lis\\|n\\(corr\\|disc\\)\\|tmod\\)\\|itibase\\|luster\\|o\\(mputab\\|rresp\\)\\)" "\\|discrim\\|expand\\|f\\(a\\(ctor\\|stclus\\)\\|orecast\\|req\\)" "\\|g\\(enmod\\|l\\(immix\\|m\\(mod\\|power\\|select\\)?\\)\\)\\|inbreed\\|k\\(de\\|rige2d\\)" "\\|l\\(attice\\|ife\\(reg\\|test\\)\\|o\\(ess\\|gistic\\)\\)" "\\|m\\(ds\\|ixed\\|o\\(de\\(clus\\|l\\)\\|rtgage\\)\\|ulttest\\)" "\\|n\\(ested\\|l\\(in\\|mixed\\)\\|par1way\\)\\|orthoreg" "\\|p\\(dlreg\\|hreg\\|l\\(an\\|s\\)\\|ower\\|r\\(in\\(comp\\|qual\\)\\|obit\\)\\)\\|r\\(sr\\)?eg" "\\|s\\(core\\|im\\(2d\\|lin\\)\\|pectra\\|t\\(atespace\\|dize\\|epdisc\\)\\|urvey\\(means\\|reg\\|select\\)\\|yslin\\)" "\\|t\\(phreg\\|pspline\\|r\\(ansreg\\|ee\\)\\|test\\)" "\\|var\\(clus\\|comp\\|iogram\\)\\|x11" "\\)") font-lock-constant-face) (cons "\\<%\\(go[ 	]*to\\|i\\(f\\|n\\(clude\\|put\\)\\)\\|let\\|put\\|sysexec\\)\\>" font-lock-constant-face) (cons "\\<%\\(by\\|else\\|t\\(o\\|hen\\)\\)\\>" font-lock-constant-face) (cons (concat "[ 	(,]" "\\(attrib\\|by\\|compress\\|d\\(ata\\|rop\\)\\|f\\(irstobs\\|ormat\\)" "\\|i\\(d\\|f\\|n\\)\\|ke\\(ep\\|y\\)\\|l\\(abel\\|ength\\)" "\\|o\\(bs\\|rder\\|ut\\)\\|rename\\|s\\(ortedby\\|plit\\)" "\\|var\\|where\\)" "[ 	]*=") font-lock-keyword-face) (cons "\\<\\(in\\(:\\|dex[ 	]*=\\)?\\|until\\|wh\\(en\\|ile\\)\\)[ 	]*(" font-lock-keyword-face) (cons (concat "\\(^[0-9]*\\|):\\|[;,]\\|then\\|else\\)[ 	]*" "\\(a\\(bort\\|rray\\|ttrib\\)\\|b\\(ayes\\|y\\)" "\\|c\\(hange\\|lass\\|ontrast\\)" "\\|d\\(elete\\|isplay\\|m\\|o\\([ 	]+\\(data\\|over\\)\\)?\\|rop\\)" "\\|e\\(rror\\|stimate\\|xc\\(hange\\|lude\\)\\)" "\\|f\\(ile\\(name\\)?\\|o\\(otnote\\(10?\\|[2-9]\\)?\\|rmat\\)\\|req\\)" "\\|go\\([ 	]*to\\|ptions\\)" "\\|hazardratio\\|[hv]bar\\(3d\\)?" "\\|i\\(d\\|f\\|n\\(dex\\|f\\(ile\\|ormat\\)\\|put\\|value\\)\\)" "\\|keep\\|l\\(abel\\|ength\\|i\\(bname\\|nk\\|st\\)\\|smeans\\)" "\\|m\\(anova\\|e\\(ans\\|rge\\)\\|issing\\|od\\(el\\|ify\\)\\)\\|note" "\\|o\\(ds\\|ptions\\|therwise\\|utput\\)\\|p\\(arms\\|lot2?\\|ut\\)" "\\|r\\(andom\\|e\\(name\\|peated\\|tain\\)\\)" "\\|s\\(ave\\|e\\(lect\\|t\\)\\|kip\\|trata\\|um\\(by\\)?\\)" "\\|t\\(ables?\\|i\\(me\\|tle\\(10?\\|[2-9]\\)?\\)\\)\\|update" "\\|va\\(lue\\|r\\)\\|w\\(eight\\|here\\|i\\(ndow\\|th\\)\\)" "\\|append\\|c\\(lose\\(file\\)?\\|reate\\)\\|edit\\|f\\(ind\\|orce\\|ree\\)" "\\|insert\\|load\\|mattrib\\|p\\(a[ru]se\\|rint\\|urge\\)" "\\|re\\(move\\|peat\\|place\\|set\\|sume\\)" "\\|s\\(et\\(in\\|out\\)\\|how\\|ort\\|tore\\|ummary\\)\\|use\\)?" "\\>") font-lock-keyword-face) (cons (concat "\\(^[0-9]*\\|):\\|[;,]\\|then\\|else\\)[ 	]*" "\\(cards4?\\|datalines\\|end\\|l\\(ostcard\\)\\|page\\|return\\|stop\\)?" "[ 	]*;") font-lock-keyword-face) (cons (concat "\\(^[0-9]*\\|):\\|[;,]\\)[ 	]*" "\\(axis\\|legend\\|pattern\\|symbol\\)" "\\([1-9][0-9]?\\)?\\>") font-lock-keyword-face) (cons "%[a-z_][a-z_0-9]*[- 	();,+*/=<>]" font-lock-function-name-face) (cons "\\<call[ 	]+[a-z_][a-z_0-9]*[ 	]*(" font-lock-function-name-face) (cons (concat "\\<" "\\(a\\(bs\\|r\\(cos\\|sin\\)\\|tan\\)\\|b\\(etainv\\|yte\\)" "\\|c\\(eil\\|inv\\|o\\(llate\\|mpress\\|sh?\\)\\|ss\\|v\\)" "\\|dacc\\(db\\(\\|sl\\)\\|s\\(l\\|yd\\)\\|tab\\)" "\\|dep\\(db\\(\\|sl\\)\\|s\\(l\\|yd\\)\\|tab\\)" "\\|d\\(a\\(te\\(\\|jul\\|part\\|time\\)\\|y\\)\\|hms\\|i\\(f[0-9]*\\|m\\|gamma\\)\\)" "\\|e\\(rfc?\\|xp\\)" "\\|f\\(i\\(nv\\|p\\(namel?\\|state\\)\\)\\|loor\\|uzz\\)\\|gam\\(inv\\|ma\\)" "\\|h\\(bound\\|ms\\|our\\)\\|i\\(n\\(dexc?\\|put\\|t\\(\\|ck\\|nx\\|rr\\)\\)\\|rr\\)" "\\|juldate\\|kurtosis\\|l\\(ag[0-9]*\\|bound\\|e\\(ft\\|ngth\\)\\|gamma\\|og\\(\\|10\\|2\\)\\)" "\\|m\\(ax\\|dy\\|ean\\|in\\(\\|ute\\)\\|o\\(d\\|nth\\|rt\\)\\)" "\\|n\\(\\|etpv\\|miss\\|o\\(rmal\\|t\\)\\|pv\\)" "\\|prob\\([ft]\\|b\\(eta\\|nml\\)\\|chi\\|gam\\|hypr\\|it\\|n\\(egb\\|orm\\)\\)" "\\|ordinal\\|p\\(oisson\\|ut\\)\\|qtr\\|r\\(e\\(peat\\|verse\\)\\|ight\\|ound\\)" "\\|ran\\(bin\\|cau\\|exp\\|g\\(am\\|e\\)\\|k\\|nor\\|poi\\|t\\(bl\\|ri\\)\\|uni\\)" "\\|s\\(aving\\|can\\|econd\\|i\\(gn\\|nh?\\)\\|qrt\\|t\\(d\\(\\|err\\)\\|fips\\|namel?\\)\\|u\\(bstr\\|m\\)\\|ymget\\)" "\\|t\\(anh?\\|i\\(me\\(\\|part\\)\\|nv\\)\\|oday\\|r\\(anslate\\|i\\(gamma\\|m\\)\\|unc\\)\\)" "\\|u\\(niform\\|pcase\\|ss\\)\\|v\\(ar\\|erify\\)" "\\|weekday\\|y\\(ear\\|yq\\)\\|zip\\(fips\\|namel?\\|state\\)" "\\|airy\\|b\\(and\\|lshift\\|not\\|or\\|rshift\\|xor\\)" "\\|c\\(nonct\\|ompbl\\)\\|d\\(airy\\|equote\\)\\|fnonct\\|tnonct" "\\|i\\(bessel\\|n\\(dexw\\|put[cn]\\)\\)\\|jbessel\\|put[cn]" "\\|lowcase\\|quote\\|resolve\\|s\\(oundex\\|ysprod\\)\\|tr\\(anwrd\\|imn\\)" "\\|a\\(ll\\|ny\\|pply\\|rmasim\\)\\|b\\(lock\\|ranks\\|tran\\)" "\\|c\\(har\\|hoose\\|on\\(cat\\|tents\\|vexit\\|vmod\\)\\|ovlag\\|shape\\|usum\\|vexhull\\)" "\\|d\\(atasets\\|esignf?\\|et\\|iag\\|o\\|uration\\)" "\\|e\\(chelon\\|igv\\(al\\|ec\\)\\)\\|f\\(ft\\|orward\\)\\|ginv" "\\|h\\(alf\\|ankel\\|dir\\|ermite\\|omogen\\)" "\\|i\\(\\|fft\\|nsert\\|nv\\(updt\\)?\\)\\|j\\(\\|root\\)\\|loc\\|mad" "\\|n\\(ame\\|col\\|leng\\|row\\|um\\)\\|o\\(pscal\\|rpol\\)" "\\|p\\(olyroot\\|roduct\\|v\\)\\|r\\(anktie\\|ates\\|atio\\|emove\\|eturn\\|oot\\|owcatc?\\)" "\\|s\\(etdif\\|hape\\|olve\\|plinev\\|pot\\|qrsym\\|ssq\\|torage\\|weep\\|ymsqr\\)" "\\|t\\(\\|eigv\\(al\\|ec\\)\\|oeplitz\\|race\\|risolv\\|ype\\)" "\\|uni\\(on\\|que\\)\\|v\\(alue\\|ecdiag\\)\\|x\\(mult\\|sect\\)\\|yield" "\\|attr[cn]\\|c\\(exist\\|lose\\)\\|d\\(close\\|num\\|open\\|read\\)" "\\|exist\\|f\\(close\\|etchobs\\|i\\(leexist\\|nfo\\)\\|open\\|put\\|write\\)" "\\|get\\(option\\|var[cn]\\)\\|lib\\(name\\|ref\\)\\|op\\(en\\|t\\(getn\\|setn\\)\\)" "\\|pathname\\|sysmsg\\|var\\(fmt\\|l\\(abel\\|en\\)\\|n\\(ame\\|um\\)\\|type\\)\\)" "[ 	]*(") font-lock-function-name-face)))) nil [9619 37753])
            ("SAS-editing-alist" variable (:default-value (quote ((sentence-end . ";[	
 */]*") (paragraph-start . "^[ 	]*$") (paragraph-separate . "^[ 	]*$") (paragraph-ignore-fill-prefix . t) (adaptive-fill-mode) (indent-line-function quote sas-indent-line) (require-final-newline . mode-require-final-newline) (comment-start . "/*") (comment-start-skip . "/[*]") (comment-end . "*/") (comment-end-skip . "[*]/") (comment-column . 40) (parse-sexp-ignore-comments . t) (ess-style . ess-default-style) (ess-local-process-name) (tab-stop-list . ess-sas-tab-stop-list) (ess-mode-syntax-table . SAS-syntax-table) (font-lock-keywords-case-fold-search . t) (font-lock-defaults quote (SAS-mode-font-lock-defaults))))) nil [37756 38970])
            ("beginning-of-sas-statement" function
               (:user-visible-flag t
                :arguments ("arg" "comment-start"))
                nil [38973 39626])
            ("sas-indent-line" function (:user-visible-flag t) nil [39628 43980])
            ("indent-sas-statement" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [44297 44933])
            ("sas-next-statement-indentation" function nil nil [44952 46380])
            ("sas-comment-start-col" function nil nil [46398 46739])
            ("sas-check-run-statements" function (:user-visible-flag t) nil [46878 47774])
            ("sas-fix-life-tables" function (:user-visible-flag t) nil [47776 48172])
            ("sas-fix-page-numbers" function
               (:user-visible-flag t
                :arguments ("offset" "page-num"))
                nil [48631 49693])
            ("sas-page-fix" function
               (:user-visible-flag t
                :arguments ("start"))
                nil [49695 50100])
            ("fix-page-breaks" function (:user-visible-flag t) nil [50102 51333])
            ("sas-page-number" function nil nil [51335 51639])
            ("sas-how-many" function (:arguments ("regexp" "end")) nil [51641 52113])
            ("beginning-of-sas-proc" function (:user-visible-flag t) nil [52115 52464])
            ("next-sas-proc" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [52466 52808])
            ("set-sas-file-name" function nil nil [52810 53369])
            ("sas-set-alternate-file-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [53391 53906])
            ("switch-to-sas-source" function (:user-visible-flag t) nil [53908 54050])
            ("switch-to-sas-lst" function (:user-visible-flag t) nil [54052 54191])
            ("switch-to-sas-log" function (:user-visible-flag t) nil [54193 54332])
            ("switch-to-sas-source-other-window" function (:user-visible-flag t) nil [54334 54502])
            ("switch-to-sas-lst-other-window" function (:user-visible-flag t) nil [54504 54669])
            ("switch-to-sas-log-other-window" function (:user-visible-flag t) nil [54671 54836])
            ("switch-to-sas-file" function (:arguments ("suff")) nil [56667 56816])
            ("switch-to-sas-file-other-window" function (:arguments ("suff")) nil [56818 56993])
            ("set-sas-file-buffer" function (:arguments ("suff" "revert" "silent")) nil [57083 58040])
            ("switch-to-sas-process-buffer" function (:user-visible-flag t) nil [58042 58286])
            ("submit-sas" function (:user-visible-flag t) nil [58288 60509])
            ("sas-sentinel" function (:arguments ("proc" "arg")) nil [60595 62193])
            ("switch-to-dataset-log-buffer" function (:user-visible-flag t) nil [63882 64031])
            ("switch-to-dataset-source-buffer" function (:user-visible-flag t) nil [64033 64213])
            ("sas-insert-local-variables" function (:user-visible-flag t) nil [66886 67198])
            ("sas-dir-mode-map" variable nil nil [68225 68254])
            ("sas-directory-name" variable nil nil [68255 68337])
            ("make-variable-buffer-local" code nil nil [68338 68386])
            ("sas-dir-buf-end" variable nil nil [68387 68415])
            ("make-variable-buffer-local" code nil nil [68416 68461])
            ("sas-sorted-by-num" variable nil nil [68462 68492])
            ("make-variable-buffer-local" code nil nil [68493 68540])
            ("if" code nil nil [68580 70041])
            ("sas-dir-mode" function (:user-visible-flag t) nil [70100 70394])
            ("sas-move-to-filename" function (:arguments ("eol")) nil [73115 73329])
            ("sas-next-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [73331 73460])
            ("sas-prev-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [73561 73755])
            ("sas-insert-set-properties" function (:arguments ("beg" "end")) nil [73757 74057])
            ("sas-get-filename" function (:user-visible-flag t) nil [74059 74625])
            ("sas-get-file-number" function (:user-visible-flag t) nil [74627 74952])
            ("sas-goto-page" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [75415 75738])
            ("forward-page-top-of-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [75740 76032])
            ("backward-page-top-of-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [76034 76332])
            ("sas-narrow-to-page" function nil nil [76334 76767])
            ("sas-forward-page-narrow" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [76769 77083])
            ("sas-backward-page-narrow" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [77085 77405])
            ("sas-goto-dataset" function (:arguments ("page")) nil [77407 77860])
            ("sas-dir-goto-page" function (:arguments ("page")) nil [78351 78459])
            ("sas-mark-item" function (:arguments ("next")) nil [78461 78800])
            ("sas-unmark-item" function nil nil [78802 79103])
            ("sas-prev-line-undo" function (:arguments ("arg")) nil [79105 79224])
            ("sas-create-var-string" function nil nil [79226 79666])
            ("ess-imenu-SAS" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [79669 79931])
            ("ess-sas-l" package nil nil [80090 80110]))          
      :file "ess-sas-l.el"
      :pointmax 80599
      :fsize 80598
      :lastmodtime '(22772 49952 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "ess.el"
      :fsize 6585
      :lastmodtime '(22772 49952 0 0))
    (semanticdb-table "semanticdb-table"
      :file "ess-mode.el"
      :fsize 44332
      :lastmodtime '(22772 49952 0 0))
    (semanticdb-table "semanticdb-table"
      :file "ess-custom.el"
      :fsize 109860
      :lastmodtime '(22772 49952 0 0))
    (semanticdb-table "semanticdb-table"
      :file "ess-sas-a.el"
      :fsize 62437
      :lastmodtime '(22772 49952 0 0)))
  :file "!Users!macbook!emacs.d.old!elpa!ess-20170327.248!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
