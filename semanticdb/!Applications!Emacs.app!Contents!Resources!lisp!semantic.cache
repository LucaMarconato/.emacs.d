;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ring" include nil nil [4858 4873])
            ("ansi-color" include nil nil [4874 4895])
            ("regexp-opt" include nil nil [4896 4917])
            ("comint" customgroup (:user-visible-flag t) nil [6629 6721])
            ("comint-completion" customgroup (:user-visible-flag t) nil [6723 6809])
            ("comint-prompt-regexp" variable (:default-value "^") nil [6946 7468])
            ("comint-prompt-read-only" variable nil nil [7470 8513])
            ("comint-delimiter-argument-list" variable nil nil [8515 8945])
            ("comint-input-autoexpand" variable nil nil [8947 9500])
            ("comint-highlight-input" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [9502 9614])
            ("comint-highlight-prompt" variable
               (:default-value (quote ((t :inherit minibuffer-prompt)))
                :type "face")
                nil [9616 9740])
            ("comint-input-ignoredups" variable nil nil [9742 9960])
            ("comint-input-ring-file-name" variable nil nil [9962 10336])
            ("comint-scroll-to-bottom-on-input" variable nil nil [10338 10772])
            ("comint-move-point-for-output" variable nil nil [10774 11499])
            ("comint-move-point-for-matching-input" variable (:default-value (quote after-input)) nil [11501 12174])
            ("defvaralias" code nil nil [12176 12254])
            ("comint-scroll-show-maximum-output" variable (:default-value t) nil [12256 12919])
            ("comint-buffer-maximum-size" variable (:default-value 1024) nil [12921 13206])
            ("comint-input-ring-size" variable (:default-value 500) nil [13208 13351])
            ("comint-input-ring-separator" variable (:default-value "
") nil [13353 13446])
            ("comint-input-history-ignore" variable (:default-value "^#") nil [13448 13568])
            ("comint-process-echoes" variable nil nil [13570 13826])
            ("comint-password-prompt-regexp" variable (:default-value (concat "\\(^ *\\|" (regexp-opt (quote ("Enter" "enter" "Enter same" "enter same" "Enter the" "enter the" "Old" "old" "New" "new" "'s" "login" "Kerberos" "CVS" "UNIX" " SMB" "LDAP" "PEM" "SUDO" "[sudo]" "Repeat" "Bad" "Retype")) t) " +\\)" "\\(?:" (regexp-opt password-word-equivalents) "\\|Response\\)" "\\(?:\\(?:, try\\)? *again\\| (empty for no passphrase)\\| (again)\\)?" "\\(?: [[:alpha:]]+ .+\\)?[:Ôºö·üñ]\\s *\\'")) nil [14418 15159])
            ("comint-get-old-input" variable (:default-value (function comint-get-old-input-default)) nil [15200 15684])
            ("comint-dynamic-complete-functions" variable (:default-value (quote (comint-c-a-p-replace-by-expanded-history comint-filename-completion))) nil [15686 15973])
            ("comint-input-filter" variable (:default-value (function comint-nonblank-p)) nil [15975 16229])
            ("comint-input-filter-functions" variable (:default-value (quote nil)) nil [16231 16404])
            ("comint-output-filter-functions" variable (:default-value (quote (ansi-color-process-output comint-postoutput-scroll-to-bottom comint-watch-for-password-prompt))) nil [16421 17089])
            ("comint-input-sender-no-newline" variable nil nil [17091 17212])
            ("comint-input-sender" variable (:default-value (function comint-simple-send)) nil [17214 17659])
            ("comint-eol-on-send" variable (:default-value t) nil [17661 17818])
            ("define-obsolete-variable-alias" code nil nil [17820 17931])
            ("comint-use-prompt-regexp" variable nil nil [18107 18491])
            ("comint-mode-hook" variable nil nil [18493 18644])
            ("comint-exec-hook" variable (:default-value (quote nil)) nil [18646 19043])
            ("comint-terminfo-terminal" variable (:default-value "dumb") nil [19045 19196])
            ("comint-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "p" (quote comint-previous-input)) (define-key map "n" (quote comint-next-input)) (define-key map [C-up] (quote comint-previous-input)) (define-key map [C-down] (quote comint-next-input)) (define-key map "r" (quote comint-history-isearch-backward-regexp)) (define-key map [3 134217842] (quote comint-previous-matching-input-from-input)) (define-key map [3 134217843] (quote comint-next-matching-input-from-input)) (define-key map "" (quote comint-show-output)) (define-key map "" (quote comint-send-input)) (define-key map "" (quote comint-delchar-or-maybe-eof)) (define-key map [delete] (quote delete-forward-char)) (define-key map [kp-delete] (quote delete-forward-char)) (define-key map " " (quote comint-accumulate)) (define-key map "" (quote comint-get-next-from-history)) (define-key map "" (quote comint-bol-or-process-mark)) (define-key map "" (quote comint-kill-input)) (define-key map "" (quote backward-kill-word)) (define-key map "" (quote comint-interrupt-subjob)) (define-key map "" (quote comint-stop-subjob)) (define-key map "" (quote comint-quit-subjob)) (define-key map "" (quote comint-copy-old-input)) (define-key map "" (quote comint-delete-output)) (define-key map "\357" (quote comint-clear-buffer)) (define-key map "" (quote comint-show-output)) (define-key map "" (quote comint-show-maximum-output)) (define-key map "" (quote comint-dynamic-list-input-ring)) (define-key map "" (quote comint-next-prompt)) (define-key map "" (quote comint-previous-prompt)) (define-key map "" (quote comint-send-eof)) (define-key map "" (quote comint-write-output)) (define-key map "." (quote comint-insert-previous-argument)) (define-key map [mouse-2] (quote comint-insert-input)) (define-key map [menu-bar completion] (cons "Complete" (make-sparse-keymap "Complete"))) (define-key map [menu-bar completion complete-expand] (quote ("Expand File Name" . comint-replace-by-expanded-filename))) (define-key map [menu-bar completion complete-listing] (quote ("File Completion Listing" . comint-dynamic-list-filename-completions))) (define-key map [menu-bar completion complete-file] (quote ("Complete File Name" . comint-dynamic-complete-filename))) (define-key map [menu-bar completion complete] (quote ("Complete at Point" . completion-at-point))) (define-key map [menu-bar inout] (cons "In/Out" (make-sparse-keymap "In/Out"))) (define-key map [menu-bar inout delete-output] (quote ("Delete Current Output Group" . comint-delete-output))) (define-key map [menu-bar inout append-output-to-file] (quote ("Append Current Output Group to File" . comint-append-output-to-file))) (define-key map [menu-bar inout write-output] (quote ("Write Current Output Group to File" . comint-write-output))) (define-key map [menu-bar inout next-prompt] (quote ("Forward Output Group" . comint-next-prompt))) (define-key map [menu-bar inout previous-prompt] (quote ("Backward Output Group" . comint-previous-prompt))) (define-key map [menu-bar inout show-maximum-output] (quote ("Show Maximum Output" . comint-show-maximum-output))) (define-key map [menu-bar inout show-output] (quote ("Show Current Output Group" . comint-show-output))) (define-key map [menu-bar inout kill-input] (quote ("Kill Current Input" . comint-kill-input))) (define-key map [menu-bar inout copy-input] (quote ("Copy Old Input" . comint-copy-old-input))) (define-key map [menu-bar inout history-isearch-backward-regexp] (quote ("Isearch Input Regexp Backward..." . comint-history-isearch-backward-regexp))) (define-key map [menu-bar inout history-isearch-backward] (quote ("Isearch Input String Backward..." . comint-history-isearch-backward))) (define-key map [menu-bar inout forward-matching-history] (quote ("Forward Matching Input..." . comint-forward-matching-input))) (define-key map [menu-bar inout backward-matching-history] (quote ("Backward Matching Input..." . comint-backward-matching-input))) (define-key map [menu-bar inout next-matching-history] (quote ("Next Matching Input..." . comint-next-matching-input))) (define-key map [menu-bar inout previous-matching-history] (quote ("Previous Matching Input..." . comint-previous-matching-input))) (define-key map [menu-bar inout next-matching-history-from-input] (quote ("Next Matching Current Input" . comint-next-matching-input-from-input))) (define-key map [menu-bar inout previous-matching-history-from-input] (quote ("Previous Matching Current Input" . comint-previous-matching-input-from-input))) (define-key map [menu-bar inout next-history] (quote ("Next Input" . comint-next-input))) (define-key map [menu-bar inout previous-history] (quote ("Previous Input" . comint-previous-input))) (define-key map [menu-bar inout list-history] (quote ("List Input History" . comint-dynamic-list-input-ring))) (define-key map [menu-bar inout expand-history] (quote ("Expand History Before Point" . comint-replace-by-expanded-history))) (let ((signals-map (make-sparse-keymap "Signals"))) (define-key map [menu-bar signals] (cons "Signals" signals-map)) (define-key signals-map [eof] (quote ("EOF" . comint-send-eof))) (define-key signals-map [kill] (quote ("KILL" . comint-kill-subjob))) (define-key signals-map [quit] (quote ("QUIT" . comint-quit-subjob))) (define-key signals-map [cont] (quote ("CONT" . comint-continue-subjob))) (define-key signals-map [stop] (quote ("STOP" . comint-stop-subjob))) (define-key signals-map [break] (quote ("BREAK" . comint-interrupt-subjob)))) (setq menu-bar-final-items (append (quote (completion inout signals)) menu-bar-final-items)) map)) nil [19198 25311])
            ("comint-ptyp" variable (:default-value t) nil [25347 25498])
            ("comint-input-ring" variable nil nil [25500 25530])
            ("comint-last-input-start" variable nil nil [25531 25567])
            ("comint-last-input-end" variable nil nil [25568 25602])
            ("comint-last-output-start" variable nil nil [25603 25640])
            ("comint-input-ring-index" variable nil nil [25641 25720])
            ("comint-matching-input-from-input-string" variable nil nil [25721 25822])
            ("comint-save-input-ring-index" variable nil nil [25823 25973])
            ("comint-accum-marker" variable nil nil [25975 26127])
            ("comint-stored-incomplete-input" variable nil nil [26129 26210])
            ("put" code nil nil [26212 26291])
            ("put" code nil nil [26292 26335])
            ("put" code nil nil [26336 26385])
            ("put" code nil nil [26386 26440])
            ("put" code nil nil [26441 26490])
            ("put" code nil nil [26491 26546])
            ("put" code nil nil [26547 26603])
            ("put" code nil nil [26604 26663])
            ("put" code nil nil [26664 26722])
            ("put" code nil nil [26723 26777])
            ("put" code nil nil [26778 26837])
            ("put" code nil nil [26838 26875])
            ("put" code nil nil [26877 26916])
            ("define-derived-mode" code nil nil [26918 31658])
            ("comint-check-proc" function (:arguments ("buffer")) nil [31660 31979])
            ("make-comint-in-buffer" function (:arguments ("name" "buffer" "program" "startfile" "switches")) nil [31996 33321])
            ("make-comint" function (:arguments ("name" "program" "startfile" "switches")) nil [33338 34120])
            ("comint-run" function (:arguments ("program")) nil [34137 34691])
            ("comint-exec" function (:arguments ("buffer" "name" "command" "startfile" "switches")) nil [34693 36557])
            ("comint-exec-1" function (:arguments ("name" "buffer" "command" "switches")) nil [36660 38007])
            ("comint-term-environment" function nil nil [38009 38783])
            ("comint-nonblank-p" function (:arguments ("str")) nil [38785 38915])
            ("comint-insert-input" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [38917 40721])
            ("comint-read-input-ring" function (:arguments ("silent")) nil [41853 44554])
            ("comint-write-input-ring" function nil nil [44556 45792])
            ("comint-dynamic-list-input-ring-window-conf" variable nil nil [45795 45846])
            ("comint-dynamic-list-input-ring-select" function (:user-visible-flag t) nil [45848 46633])
            ("comint-dynamic-list-input-ring" function (:user-visible-flag t) nil [46635 47964])
            ("comint-regexp-arg" function (:arguments ("prompt")) nil [47967 48528])
            ("comint-search-arg" function (:arguments ("arg")) nil [48530 48952])
            ("comint-restore-input" function (:user-visible-flag t) nil [48954 49265])
            ("comint-search-start" function (:arguments ("arg")) nil [49267 49748])
            ("comint-previous-input-string" function (:arguments ("arg")) nil [49782 50079])
            ("comint-previous-input" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [50081 50568])
            ("comint-next-input" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [50570 50698])
            ("comint-previous-matching-input-string" function (:arguments ("regexp" "arg")) nil [50700 50997])
            ("comint-previous-matching-input-string-position" function (:arguments ("regexp" "arg" "start")) nil [50999 52199])
            ("comint-delete-input" function nil nil [52201 52486])
            ("comint-previous-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [52488 53450])
            ("comint-next-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [53452 53845])
            ("comint-previous-matching-input-from-input" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [53847 54778])
            ("comint-next-matching-input-from-input" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [54780 55148])
            ("comint-replace-by-expanded-history" function
               (:user-visible-flag t
                :arguments ("silent" "start"))
                nil [55151 56167])
            ("comint-c-a-p-replace-by-expanded-history" function (:arguments ("silent" "start")) nil [56169 57186])
            ("comint-replace-by-expanded-history-before-point" function (:arguments ("silent" "start" "dry-run")) nil [57189 61421])
            ("comint-magic-space" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [61424 61691])
            ("comint-history-isearch" variable nil nil [61730 62432])
            ("comint-history-isearch-backward" function (:user-visible-flag t) nil [62434 62623])
            ("comint-history-isearch-backward-regexp" function (:user-visible-flag t) nil [62625 62840])
            ("defvar-local" code nil nil [62842 62899])
            ("comint-history-isearch-setup" function nil nil [62901 63703])
            ("comint-history-isearch-end" function nil nil [63705 64199])
            ("comint-goto-input" function (:arguments ("pos")) nil [64201 64786])
            ("comint-history-isearch-search" function nil nil [64788 67141])
            ("comint-history-isearch-message" function (:arguments ("c-q-hack" "ellipsis")) nil [67143 68895])
            ("comint-history-isearch-wrap" function nil nil [68897 69486])
            ("comint-history-isearch-push-state" function nil nil [69488 69802])
            ("comint-history-isearch-pop-state" function (:arguments ("_cmd" "hist-pos")) nil [69804 70004])
            ("comint-within-quotes" function (:arguments ("beg" "end")) nil [70008 70334])
            ("comint-how-many-region" function (:arguments ("regexp" "beg" "end")) nil [70336 70601])
            ("comint-args" function (:arguments ("string" "begin" "end")) nil [70603 71378])
            ("comint-delim-arg" function (:arguments ("arg")) nil [71380 72396])
            ("comint-arguments" function (:arguments ("string" "nth" "mth")) nil [72398 74859])
            ("comint-add-to-input-history" function (:arguments ("cmd")) nil [74894 75564])
            ("comint-send-input" function
               (:user-visible-flag t
                :arguments ("no-newline" "artificial"))
                nil [75566 83984])
            ("comint-preoutput-filter-functions" variable nil nil [83986 84634])
            ("comint-inhibit-carriage-motion" variable nil nil [84636 84796])
            ("comint-last-prompt" variable nil nil [84798 84994])
            ("comint-snapshot-last-prompt" function nil nil [84996 85539])
            ("comint-carriage-motion" function (:arguments ("start" "end")) nil [85541 87791])
            ("comint-output-filter" function (:arguments ("process" "string")) nil [87934 92072])
            ("comint-preinput-scroll-to-bottom" function nil nil [92074 93175])
            ("follow-mode" variable nil nil [93177 93197])
            ("declare-function" code nil nil [93198 93275])
            ("comint-postoutput-scroll-to-bottom" function (:arguments ("_string")) nil [93277 94227])
            ("comint-adjust-window-point" function (:arguments ("window" "process")) nil [94230 94901])
            ("comint-adjust-point" function (:arguments ("selected")) nil [94937 95573])
            ("comint-truncate-buffer" function
               (:user-visible-flag t
                :arguments ("_string"))
                nil [95575 96014])
            ("comint-strip-ctrl-m" function
               (:user-visible-flag t
                :arguments ("_string"))
                nil [96016 96545])
            ("defalias" code nil nil [96546 96597])
            ("comint-show-maximum-output" function (:user-visible-flag t) nil [96599 96771])
            ("comint-get-old-input-default" function nil nil [96773 97555])
            ("comint-copy-old-input" function (:user-visible-flag t) nil [97557 97951])
            ("comint-skip-prompt" function nil nil [97953 98237])
            ("comint-after-pmark-p" function nil nil [98239 98440])
            ("comint-simple-send" function (:arguments ("proc" "string")) nil [98442 99017])
            ("comint-line-beginning-position" function nil nil [99019 100106])
            ("comint-bol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [100108 100637])
            ("comint-read-noecho" function (:arguments ("prompt" "_ignore")) nil [100661 100737])
            ("send-invisible" function
               (:user-visible-flag t
                :arguments ("prompt"))
                nil [100929 101774])
            ("comint-watch-for-password-prompt" function (:arguments ("string")) nil [101776 102358])
            ("comint-send-string" function (:arguments ("process" "string")) nil [102397 102756])
            ("comint-send-region" function (:arguments ("process" "start" "end")) nil [102758 103123])
            ("comint-delete-output" function (:user-visible-flag t) nil [103152 103796])
            ("comint-write-output" function
               (:user-visible-flag t
                :arguments ("filename" "append" "mustbenew"))
                nil [103798 104899])
            ("comint-append-output-to-file" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [105036 105278])
            ("comint-show-output" function (:user-visible-flag t) nil [105280 105794])
            ("comint-clear-buffer" function (:user-visible-flag t) nil [105796 105941])
            ("comint-interrupt-subjob" function (:user-visible-flag t) nil [105943 106126])
            ("comint-kill-subjob" function (:user-visible-flag t) nil [106128 106272])
            ("comint-quit-subjob" function (:user-visible-flag t) nil [106274 106418])
            ("comint-stop-subjob" function (:user-visible-flag t) nil [106420 106819])
            ("comint-continue-subjob" function (:user-visible-flag t) nil [106821 107021])
            ("comint-skip-input" function nil nil [107023 107516])
            ("comint-kill-input" function (:user-visible-flag t) nil [107518 107773])
            ("comint-delchar-or-maybe-eof" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [107775 108153])
            ("comint-send-eof" function (:user-visible-flag t) nil [108155 108293])
            ("comint-backward-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [108296 109378])
            ("comint-forward-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [109381 109854])
            ("comint-next-prompt" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [109857 111032])
            ("comint-previous-prompt" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [111035 111355])
            ("defvar-local" code nil nil [111422 111487])
            ("defvar-local" code nil nil [111488 111549])
            ("comint-insert-previous-argument" function
               (:user-visible-flag t
                :arguments ("index"))
                nil [111635 113674])
            ("comint-update-fence" function nil nil [113739 115156])
            ("comint-kill-whole-line" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [115158 115830])
            ("comint-kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [115832 117412])
            ("comint-source-default" function (:arguments ("previous-dir/file" "source-modes")) nil [118896 120611])
            ("comint-check-source" function (:arguments ("fname")) nil [120614 121233])
            ("comint-extract-string" function nil nil [121235 121545])
            ("comint-get-source" function (:arguments ("prompt" "prev-dir/file" "source-modes" "mustmatch-p")) nil [121547 123048])
            ("comint-proc-query" function (:arguments ("proc" "str")) nil [124171 125207])
            ("comint-completion-autolist" variable nil nil [126201 126404])
            ("comint-completion-addsuffix" variable (:default-value t) nil [126406 126949])
            ("comint-completion-recexact" variable nil nil [126951 127228])
            ("comint-completion-fignore" variable nil nil [127230 127524])
            ("comint-file-name-prefix" variable (:default-value (purecopy "")) nil [127541 127761])
            ("comint-file-name-chars" variable (:default-value (if (memq system-type (quote (ms-dos windows-nt cygwin))) "~/A-Za-z0-9_^$!#%&{}@`'.,:()-" "[]~/A-Za-z0-9+@:_.$#%,={}-")) nil [127763 128120])
            ("comint-file-name-quote-list" variable nil nil [128122 128269])
            ("comint-directory" function (:arguments ("directory")) nil [128272 128506])
            ("comint-word" function (:arguments ("word-chars")) nil [128509 129552])
            ("comint-substitute-in-file-name" function (:arguments ("filename")) nil [129554 130176])
            ("comint--match-partial-filename" function nil nil [130178 130342])
            ("comint--unquote&requote-argument" function (:arguments ("qstr" "upos")) nil [130344 131637])
            ("comint--unquote-argument" function (:arguments ("str")) nil [131639 131724])
            ("define-obsolete-function-alias" code nil nil [131725 131826])
            ("comint-match-partial-filename" function nil nil [131828 132113])
            ("comint-quote-filename" function (:arguments ("filename")) nil [132115 132583])
            ("comint-unquote-filename" function (:arguments ("filename")) nil [132585 132857])
            ("comint--requote-argument" function (:arguments ("upos" "qstr")) nil [132859 133041])
            ("comint-completion-at-point" function nil nil [133043 133152])
            ("define-obsolete-function-alias" code nil nil [133154 133243])
            ("comint-dynamic-complete-filename" function (:user-visible-flag t) nil [133245 134176])
            ("comint-filename-completion" function nil nil [134178 134353])
            ("comint-completion-file-name-table" function (:arguments ("string" "pred" "action")) nil [134355 135064])
            ("comint-unquote-function" variable (:default-value (function comint--unquote-argument)) nil [135066 135243])
            ("comint-requote-function" variable (:default-value (function comint--requote-argument)) nil [135244 135421])
            ("comint--complete-file-name-data" function nil nil [135423 136721])
            ("comint-dynamic-complete-as-filename" function nil nil [136723 137058])
            ("comint-replace-by-expanded-filename" function (:user-visible-flag t) nil [137060 137663])
            ("comint-dynamic-simple-complete" function (:arguments ("stub" "candidates")) nil [137666 139934])
            ("comint-dynamic-list-filename-completions" function (:user-visible-flag t) nil [139936 140433])
            ("comint-displayed-dynamic-completions" variable nil nil [140645 140694])
            ("comint-dynamic-list-completions-config" variable nil nil [140696 140747])
            ("comint-dynamic-list-completions" function (:arguments ("completions" "common-substring")) nil [140749 143820])
            ("comint-get-next-from-history" function (:user-visible-flag t) nil [143823 144272])
            ("comint-accumulate" function (:user-visible-flag t) nil [144274 144790])
            ("comint-goto-process-mark" function (:user-visible-flag t) nil [144792 145222])
            ("comint-bol-or-process-mark" function (:user-visible-flag t) nil [145224 145979])
            ("comint-set-process-mark" function (:user-visible-flag t) nil [145981 146253])
            ("comint-redirect-verbose" variable nil nil [148501 148702])
            ("comint-redirect-filter-functions" variable nil nil [148763 149406])
            ("comint-redirect-output-buffer" variable nil nil [149431 149527])
            ("comint-redirect-finished-regexp" variable nil nil [149529 149790])
            ("comint-redirect-insert-matching-regexp" variable nil nil [149792 150109])
            ("comint-redirect-echo-input" variable nil nil [150111 150226])
            ("comint-redirect-completed" variable nil nil [150228 150330])
            ("comint-redirect-original-mode-line-process" variable nil nil [150332 150434])
            ("comint-redirect-perform-sanity-check" variable (:default-value t) nil [150436 150937])
            ("comint-redirect-subvert-readonly" variable nil nil [150939 151245])
            ("comint-redirect-previous-input-string" variable nil nil [151247 151446])
            ("comint-redirect-setup" function (:arguments ("output-buffer" "comint-buffer" "finished-regexp" "echo-input")) nil [151584 152751])
            ("comint-redirect-cleanup" function (:user-visible-flag t) nil [152753 153274])
            ("defalias" code nil nil [153375 153446])
            ("comint-redirect-filter" function (:arguments ("orig-filter" "process" "input-string")) nil [153448 154117])
            ("comint-redirect-preoutput-filter" function (:arguments ("input-string")) nil [154120 156679])
            ("comint-redirect-send-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "echo" "no-display"))
                nil [156696 157241])
            ("comint-redirect-send-command-to-process" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "process" "echo" "no-display"))
                nil [157258 158755])
            ("comint-redirect-results-list" function (:arguments ("command" "regexp" "regexp-group")) nil [158772 159119])
            ("comint-redirect-results-list-from-process" function (:arguments ("process" "command" "regexp" "regexp-group")) nil [159136 160234])
            ("comint" package nil nil [163763 163780]))          
      :file "comint.el.gz"
      :pointmax 163806
      :fsize 44507
      :lastmodtime '(23261 60167 0 0)
      :unmatched-syntax nil))
  :file "!Applications!Emacs.app!Contents!Resources!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
